import type { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import PageTitle from "../../components/PageTitle";
import RelatedBlogs from "../../components/RelatedBlogs";
import { BlogInterface } from "../../interface/Interface";
interface Props {
  currentBlog: BlogInterface;
  randomRelatedBlogs: BlogInterface[];
}

const BlogDetail: NextPage<Props> = ({ currentBlog, randomRelatedBlogs }) => {
  return (
    <>
      <Head>
        <title>Store - title</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageTitle title={currentBlog.title} />
      <section className="bg0 p-t-52 p-b-20">
        <div className="container">
          <div className="row">
            <div className="col-md-8 col-lg-9 p-b-80">
              <div className="p-r-45 p-r-0-lg">
                <div className="wrap-pic-w how-pos5-parent">
                  <img src={currentBlog.img} alt={currentBlog.title} />
                </div>

                <div className="p-t-32">
                  <span className="flex-w align-items-center flex-m stext-111 cl2 p-b-19">
                    <span className="flex-c-m mr-3 bor7 p-lr-15 trans-04">
                      {currentBlog.category}
                    </span>

                    <span>
                      <span className="cl4">By</span> {currentBlog.author}
                      <span className="cl12 m-l-4 m-r-6">|</span>
                    </span>

                    <span>{currentBlog.date}</span>
                  </span>

                  <h4 className="ltext-109 cl2 p-b-28">{currentBlog.title}</h4>

                  <p className="stext-117 cl6 p-b-26">
                    {currentBlog.first_content}
                  </p>

                  <p className="stext-117 cl6 p-b-26">
                    {currentBlog.second_content}
                  </p>
                </div>
              </div>
            </div>

            <div className="col-md-4 col-lg-3 p-b-80">
              <div className="side-menu">
                {randomRelatedBlogs &&
                  randomRelatedBlogs.map((relatedBlog) => (
                    <RelatedBlogs
                      key={relatedBlog.id}
                      relatedBlog={relatedBlog}
                    />
                  ))}
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  const allProductsRes = await fetch("http://localhost:5001/blogs");
  const allProducts: BlogInterface[] = await allProductsRes.json();

  const paths = allProducts.map((p) => ({
    params: {
      id: p.id.toString(),
    },
  }));

  return {
    paths,
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  const randomNo = Math.floor(Math.random() * 10) + 1;
  if (params && params.id) {
    const res = await fetch(`http://localhost:5001/blogs/${params.id}`);
    const currentBlog = await res.json();

    const relatedRes = await fetch(
      `http://localhost:5001/blogs?_start=${randomNo}&_limit=3`
    );
    const randomRelatedBlogs = await relatedRes.json();

    return {
      props: {
        currentBlog,
        randomRelatedBlogs,
      },
    };
  }

  return {
    notFound: true,
  };
};

export default BlogDetail;
